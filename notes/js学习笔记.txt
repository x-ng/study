数组:
	splice 对原数组进行操作
	slice  返回一个新的数组
	forEach 循环遍历数组,没有return
	map 映射,有return
	filter 过滤,有return
	reduce 映射,有return
	some 检测,返回布尔值,如果为真,跳出全部训话,如果为假,继续循环
	every 返回值是布尔值,如果为真,跳出本次循环继续,如果为假,跳出全部循环
	
	Array.from('foo')
	Array ["f", "o", "o"]

	Array.from([1, 2, 3], x => x + x)
	Array [2, 4, 6]
	
	对象:
	Object.assign({},this.searchData);	合并对象,返回一个新对象
	Object.keys({ 100: "a", 2: "b", 7: "c"}); 类似于for..in;console: ["2", "7", "100"]
	Object.is()		比较两个值是否相同,返回布尔值
字符串:

正则表达式:
	^: 正则开始
	[0-9]+: 匹配多个数字
	[0-9]: 匹配单个数字
	+: 匹配一个或多个
	?: 一个字符
	*: 多个字符
	i: 不区分大小匹配
	g: 全文搜索,不是第一个
	
	
	test(): 存在?
	exec(): 检索字符串的指定值
	toString(): 返回正则表达式的字符串
	
	var re = new RegExp("\\w+")
	var re = /\w+/
	
	
	
	concat 数组深拷贝
	JSON.parse(JSON.stringify(state.YardsOrder))






return、continue、break 、continue 的区别 
return ： 
      (1) return 从当前的方法中退出,返回到该调用的方法的语句处,继续执行。
      (2) return 返回一个值给调用该方法的语句，返回值的数据类型必须与方法的声明中的返回值的类型一致。
      (3) return后面也可以不带参数，不带参数就是返回空，其实主要目的就是用于想中断函数执行，返回调用函数处。
continue : 
　　终止本次循环的执行，即跳过当前这次循环中continue语句后尚未执行的语句，接着进行下一次循环条件的判断。
　  它不是退出一个循环，而是开始循环的一次新迭代。

     continue语句只能用在while语句、do/while语句、for语句、或者for/in语句的循环体内，在其它地方使用都会引起错误！
break :
	（1）break在循环体内，强行结束循环的执行，也就是结束整个循环过程，不在判断执行循环的条件是否成立，直接转向循环语句下面的语句。
    （2）当break出现在循环体中的switch语句体内时，其作用只是跳出该switch语句体。
	