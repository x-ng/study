1.计算属性和watch
watch 和 computed 的区别：
    watch 一个数据影响多个数据，可以直接修改 data 中定义过的属性( data 中定义过的数据变化后，其他使用到这个数据的都变化)
    computed 一个数据收多个数据影响，不能计算在 data 中定义过的数据(直接在 html 上使用，其中使用到的 data 中的信息变化的时候，这个 html 上的值变化)，有缓存作用

代码：
<div>{{Name}}</div>
data(){
    return {
        num:0,
        lastname:'',
        firstname:'',
    }
}
//当num的值发生变化时，就会调用num的方法，方法里面的形参对应的是num的新值和旧值
watch:{
    num:function(val,oldval){
        console.log(val,oldval);
    }
},
//计算属性computed,计算的是Name依赖的值,它不能计算在data中已经定义过的变量。
computed:{
    Name:function(){
        return this.firstname+this.lastname;
    }
}

2.组件
2.1 定义方式：
    2.1.1 用 extent 定义
        (1) 使用 vue.extend 定义组件模块
            var dv = Vue.extend({
                template:'<div>我是一个组件</div>'
            })
        (1) 使用 vue.component() 注册组件
            Vue.component('com',dv)
        (1) 在 vue 托管的区域像 HTML 一样使用
            <com></com>

    2.1.2 使用 vue.component() 定义
        (1) 使用Vue.component定义组件
            Vue.component('com',{
                template:'<div><p>我是一个组件中的元素</p><span>我也是组件中的元素</span></div>'
            })
        (1) 使用组件
                <com></com>

    2.1.3 使用 template 标签定义模板
        (1) 使用Vue.component定义组件，并且使用选择器选择模板
            Vue.component('com',{
                template:'#temp'
            }) 

        (1) 使用template标签定义模板,并且给template标签添加id
            <template id='tmpl'>
                <div>
                    <p>我是p元素</p>
                    <span>我是span元素</span>
                </div>
            </template>

        (1) 使用组件
            <com></com>

加载：
//局部注册

 var mycomponent = new extend({        <!--Vue.extend()是Vue构造器的扩展，调用Vue.extend()我们将创建一个组件构造器-->

 template:"<div>我是局部注册</>"

})

new Vue（{

 el:"#app",

components:{                 <!--components是实现局部注册的属性-->

 "my-component":mycomponent 

}

}） <!--这样我们组件就能应用在id=app的标签里面，其他地方不能应用,会报错！

     如果想组件在任何地方都能应用，我们就需要注册全局组件-->

 

//全局注册

var mycomponent  = new extend({

 template:"<div>我是全局组件，能在任何地方应用哦</div>"

})

Vue.component("my-compoent",mycomponent)    <!--这样就注册了一个全局组件-->

new Vue({

el:"#app"

})


父组件包含子组件
<template id='father'>
    <div>
        <son></son>
    </div>
</template>
// 父组件
Vue.component('father',{
    template:'#father',
    components:{
        // 子组件
        son:{
            template:'<div>我是son组件</div>'
        }
    }
})



3.vuex 中的数据以及方法的调用
	state 中定义的数据: this.$store.state.count(count是computed)
	getter 中的定义的计算属性: this.$store.getter.***
	mutation 中的定义的方法: this.$store.commit('方法名',数据)
	action 中的定义的方法: this.$store.dispatch('方法名')
	
	使用vuex实现的双向数据绑定(鬼才方法)
		绑定事件修改 vuex 绑定的数据
		讲 vuex 中的数据绑定到相应的标签
	
	<span class="fs-sm"><input type="text" :value="brNewArr[0].courier_odd" @input="brCourierUpdateDate('courier_odd',0,$event)" class="input-text-active c-255-8"/></span>

	//双向绑定
    BR_COURIER_UPDATE_DATE(state,obj){
        if(obj.type == "courier_odd"){
            state.brNewArr.forEach(function(item,index){
                item.courier_odd = obj.val;
            })
        }else{
            state.brNewArr[obj.index][obj.type] = obj.val;
        }     
    },




